#!/usr/bin/env python3

import os
import sys
import glob
from string import Template

# Define template for component build CMakeLists.txt
CMAKELISTS_TEMPLATE = Template("""# Component Build Directory - ${component}_build/CMakeLists.txt
# Generated by OBINexus Component Regeneration Protocol
cmake_minimum_required(VERSION 3.16)

project(${component}_build VERSION 1.0.0 LANGUAGES C)

# Import core build system utilities
include($${CMAKE_SOURCE_DIR}/cmake/ComponentSystem.cmake)

# Define component sources
file(GLOB_RECURSE COMPONENT_SOURCES 
     "$${CMAKE_SOURCE_DIR}/src/core/${component}/*.c"
     "$${CMAKE_SOURCE_DIR}/src/core/${component}/*.h")

# Define component dependencies
set(COMPONENT_DEPENDENCIES "${dependencies}")

# Register component with build orchestration system
nlink_register_component(
    NAME ${component}
    SOURCES $${COMPONENT_SOURCES}
    DEPENDENCIES $${COMPONENT_DEPENDENCIES}
    ENABLE_STATIC TRUE
    ENABLE_SHARED FALSE
)

# Generate component verification artifacts
add_custom_target(${component}_verification
    COMMAND $${CMAKE_COMMAND} -E echo "Verifying component integrity: ${component}"
    COMMAND $${CMAKE_COMMAND} -E echo "Component dependencies: $${COMPONENT_DEPENDENCIES}"
)

# Register component verification with build system
add_dependencies(${component} ${component}_verification)
""")

# Component dependency map based on architectural specification
DEPENDENCY_MAP = {
    "pipeline": ["minimizer", "symbols"],
    "mpsystem": ["common", "pipeline"],
    "spsystem": ["common", "pipeline"],
    "pattern_matching": ["pattern", "common"],
    "metadata": ["common"],
    "minimizer": ["common"],
    "symbols": ["common"],
    "versioning": ["common"],
    # Additional dependencies as per architectural specification
}

# Directory containing component directories
SRC_CORE_DIR = os.path.join(os.getcwd(), "src", "core")

# Find all component directories
component_dirs = glob.glob(os.path.join(SRC_CORE_DIR, "*"))
components = [os.path.basename(d) for d in component_dirs if os.path.isdir(d)]

# Generate CMakeLists.txt for each component build directory
for component in components:
    build_dir = os.path.join(SRC_CORE_DIR, f"{component}_build")
    
    # Create build directory if it doesn't exist
    if not os.path.exists(build_dir):
        os.makedirs(build_dir)
    
    # Get dependencies for this component
    dependencies = DEPENDENCY_MAP.get(component, [])
    dependencies_str = " ".join(dependencies)
    
    # Generate CMakeLists.txt content
    cmakelists_content = CMAKELISTS_TEMPLATE.substitute(
        component=component,
        dependencies=dependencies_str
    )
    
    # Write CMakeLists.txt file
    cmakelists_path = os.path.join(build_dir, "CMakeLists.txt")
    with open(cmakelists_path, "w") as f:
        f.write(cmakelists_content)
    
    print(f"Generated {cmakelists_path}")

print(f"Generated CMakeLists.txt files for {len(components)} component build directories")
