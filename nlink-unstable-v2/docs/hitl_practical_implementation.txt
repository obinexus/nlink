/**
 * Practical HITL Implementation Example
 * Demonstrates statement expression and intent resolution across all nlink configuration types
 * 
 * Integration Points:
 * - nlinkt.txt: Module-level configuration with HITL validation
 * - *.nlink: Component-specific configuration with intent resolution
 * - pkg.nlink: Package-level configuration with exception handling
 * - Direct/Indirect linking coordination with human oversight
 */

#include "nlink_hitl_intent_resolution.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

/**
 * ============================================================================
 * PRACTICAL EXAMPLE 1: NLINKT.TXT PROCESSING WITH HITL VALIDATION
 * ============================================================================
 */

/**
 * Example nlinkt.txt content for tokenizer module:
 * 
 * # Module declaration with human intent annotation
 * @human_intent: "Core tokenization module for parser pipeline"
 * declare_module(tokenizer)
 *     scope(public)
 *     version(2.1.0)
 *     
 *     # Statement requiring transformation validation
 *     if(FEATURE_UNICODE_SUPPORT)
 *         add_source(lexer/unicode_lexer.c)
 *         add_expression(lexer/unicode_lexer.c → unicode_expr.c)
 *         @requires_human_review: "Unicode transformation needs cultural validation"
 *     endif()
 *     
 *     # Direct vs Indirect linking intent
 *     @link_strategy: "prefer_indirect_for_hotswap"
 *     exports(
 *         tokenize → public,direct_link
 *         lex_state → protected,indirect_link
 *         internal_buffer → private,no_link
 *     )
 * enddeclare()
 */

nexus_result_t process_nlinkt_file_example(const char* file_path) {
    // Initialize HITL framework
    config_management_engine_t* engine;
    nexus_result_t result = nlink_hitl_init_framework(".", true, &engine);
    if (result != NEXUS_SUCCESS) {
        return result;
    }

    // Parse nlinkt.txt with statement expression analysis
    nlink_config_descriptor_t config_desc = {
        .file_type = CONFIG_FILE_TYPE_NLINKT_TXT,
        .parsed_successfully = false
    };
    strncpy(config_desc.file_path, file_path, sizeof(config_desc.file_path) - 1);

    // Example statement expression extraction
    statement_expression_t stmt_expr = {
        .type = STMT_TYPE_CONDITIONAL,
        .source_text = "if(FEATURE_UNICODE_SUPPORT)",
        .transformed_expr = "(FEATURE_UNICODE_SUPPORT) ? unicode_config : default_config",
        .human_intent = "Enable Unicode support when feature flag is active",
        .confidence_score = 0.85f,
        .requires_human_validation = true,
        .qa_metadata = {
            .human_reviewed = false,
            .is_true_positive = false  // Will be determined by human review
        }
    };
    strncpy(stmt_expr.source_file, file_path, sizeof(stmt_expr.source_file) - 1);
    stmt_expr.line_number = 8;
    strncpy(stmt_expr.file_type, "nlinkt.txt", sizeof(stmt_expr.file_type) - 1);

    // Extract intent from @human_intent annotation
    ast_intent_node_t intent_node = {
        .layer_type = INTENT_LAYER_CONFIGURATION,
        .semantic_identifier = "tokenizer_module_intent",
        .intent_description = "Core tokenization module for parser pipeline",
        .technical_rationale = "Provides lexical analysis for downstream parser components",
        .link_coordination = {
            .target_link_layer = 1, // Primary link layer
            .library_component = "tokenizer_lib",
            .supports_direct_linking = true,
            .supports_indirect_linking = true,
            .preferred_approach = "indirect" // From @link_strategy annotation
        },
        .hitl_metadata = {
            .requires_human_approval = true,
            .review_status = "pending",
            .human_reviewer = "nnamdi_okpala" // Assigned based on expertise
        },
        .priority_score = 100 // High priority - core module
    };

    // Add to configuration descriptor
    config_desc.statements = malloc(sizeof(statement_expression_t));
    config_desc.statements[0] = stmt_expr;
    config_desc.statement_count = 1;

    config_desc.intent_nodes = malloc(sizeof(ast_intent_node_t));
    config_desc.intent_nodes[0] = intent_node;
    config_desc.intent_node_count = 1;

    // Human validation checkpoint
    if (stmt_expr.requires_human_validation) {
        printf("HITL VALIDATION REQUIRED:\n");
        printf("  File: %s (line %u)\n", stmt_expr.source_file, stmt_expr.line_number);
        printf("  Statement: %s\n", stmt_expr.source_text);
        printf("  Proposed Transform: %s\n", stmt_expr.transformed_expr);
        printf("  Confidence: %.2f\n", stmt_expr.confidence_score);
        printf("  Intent: %s\n", stmt_expr.human_intent);
        printf("  Reviewer: %s\n", intent_node.hitl_metadata.human_reviewer);
        
        // In real implementation, this would queue for human review
        // For demo, we simulate human approval
        config_desc.statements[0].qa_metadata.human_reviewed = true;
        config_desc.statements[0].qa_metadata.is_true_positive = true;
        strncpy(config_desc.statements[0].qa_metadata.qa_notes, 
                "Human reviewer approved Unicode transformation", 
                sizeof(config_desc.statements[0].qa_metadata.qa_notes) - 1);
    }

    // Cleanup
    free(config_desc.statements);
    free(config_desc.intent_nodes);
    
    return NEXUS_SUCCESS;
}

/**
 * ============================================================================
 * PRACTICAL EXAMPLE 2: *.NLINK COMPONENT CONFIGURATION WITH INTENT RESOLUTION
 * ============================================================================
 */

/**
 * Example tokenizer.nlink content:
 * 
 * # Component-specific configuration
 * component(tokenizer)
 * 
 * # Intent-driven configuration
 * @performance_intent: "Optimize for streaming tokenization"
 * @memory_intent: "Minimize heap allocations"
 * @linking_intent: "Support both direct and indirect linking"
 * 
 * performance_config {
 *     buffer_size = 8192
 *     # Statement expression requiring validation
 *     streaming_mode = (input_size > STREAM_THRESHOLD) ? true : false
 *     @human_note: "Threshold needs benchmarking validation"
 * }
 * 
 * linking_config {
 *     direct_symbols = ["tokenize", "lex_init"]
 *     indirect_symbols = ["lex_state", "token_buffer"]
 *     hotswap_symbols = ["optimization_flags"]
 * }
 * 
 * exception_handling {
 *     on_parse_error = "graceful_degradation"
 *     on_memory_error = "fallback_to_basic_tokenizer" 
 *     on_unicode_error = "escalate_to_human"
 * }
 */

nexus_result_t process_nlink_component_file_example(const char* file_path) {
    // Initialize intent resolution engine
    intent_resolution_engine_t intent_engine = {0};
    
    // Example intent extraction from @performance_intent annotation
    ast_intent_node_t performance_intent = {
        .layer_type = INTENT_LAYER_OPTIMIZATION,
        .semantic_identifier = "tokenizer_performance_optimization",
        .intent_description = "Optimize for streaming tokenization",
        .technical_rationale = "High-throughput tokenization requires streaming buffer management",
        .link_coordination = {
            .target_link_layer = 1,
            .library_component = "tokenizer_performance_lib",
            .supports_direct_linking = true,
            .supports_indirect_linking = false, // Performance-critical, prefer direct
            .preferred_approach = "direct"
        },
        .exception_handling = {
            .exception_handler = "performance_exception_handler",
            .error_recovery_strategy = "fallback_to_standard_tokenizer",
            .supports_graceful_degradation = true,
            .retry_count = 3,
            .timeout_ms = 5000
        }
    };
    strncpy(performance_intent.source_files[0], file_path, 
            sizeof(performance_intent.source_files[0]) - 1);
    performance_intent.source_file_count = 1;

    // Example statement expression from streaming_mode assignment
    statement_expression_t streaming_stmt = {
        .type = STMT_TYPE_EXPRESSION,
        .source_text = "streaming_mode = (input_size > STREAM_THRESHOLD) ? true : false",
        .transformed_expr = "streaming_mode = evaluate_streaming_condition(input_size)",
        .human_intent = "Enable streaming mode for large inputs to optimize memory usage",
        .confidence_score = 0.75f, // Lower confidence due to threshold dependency
        .requires_human_validation = true,
        .qa_metadata = {
            .human_reviewed = false
        }
    };
    strncpy(streaming_stmt.source_file, file_path, sizeof(streaming_stmt.source_file) - 1);
    streaming_stmt.line_number = 12;
    strncpy(streaming_stmt.file_type, "nlink", sizeof(streaming_stmt.file_type) - 1);

    // Intent conflict detection example
    ast_intent_node_t memory_intent = {
        .layer_type = INTENT_LAYER_OPTIMIZATION,
        .semantic_identifier = "tokenizer_memory_optimization", 
        .intent_description = "Minimize heap allocations",
        .technical_rationale = "Reduce memory pressure for embedded deployment",
        .link_coordination = {
            .preferred_approach = "indirect" // Conflicts with performance intent!
        }
    };

    // Detect intent conflict
    if (strcmp(performance_intent.link_coordination.preferred_approach, 
               memory_intent.link_coordination.preferred_approach) != 0) {
        
        printf("INTENT CONFLICT DETECTED:\n");
        printf("  Performance Intent: %s linking\n", 
               performance_intent.link_coordination.preferred_approach);
        printf("  Memory Intent: %s linking\n", 
               memory_intent.link_coordination.preferred_approach);
        printf("  Resolution Required: Human coordinator needed\n");
        
        // Create exception for human resolution
        exception_context_t conflict_exception = {
            .type = EXCEPTION_TYPE_INTENT_CONFLICT,
            .description = "Performance and memory intents specify conflicting linking approaches",
            .requires_human_intervention = true,
            .hitl_escalation = {
                .escalated_to_human = true,
                .assigned_reviewer = "senior_architect",
                .escalation_reason = "Intent conflict requires architectural decision"
            }
        };
        strncpy(conflict_exception.source_file, file_path, 
                sizeof(conflict_exception.source_file) - 1);
        strncpy(conflict_exception.exception_id, "INTENT_CONFLICT_001", 
                sizeof(conflict_exception.exception_id) - 1);
        
        // In real implementation, this would be queued for human resolution
        printf("  Exception ID: %s queued for human review\n", conflict_exception.exception_id);
    }

    return NEXUS_SUCCESS;
}

/**
 * ============================================================================
 * PRACTICAL EXAMPLE 3: PKG.NLINK PACKAGE-LEVEL CONFIGURATION WITH EXCEPTION HANDLING
 * ============================================================================
 */

/**
 * Example pkg.nlink content:
 * 
 * package(nlink_tokenizer_package)
 *     version(2.1.0)
 *     
 * # Package-level intent annotations
 * @deployment_intent: "Support both embedded and server deployment"
 * @compatibility_intent: "Maintain backward compatibility with v1.x API"
 * @exception_strategy: "Comprehensive error recovery with human escalation"
 * 
 * components {
 *     tokenizer {
 *         linking = "indirect"  # From component analysis
 *         exception_handling = "graceful_degradation"
 *     }
 *     lexer {
 *         linking = "direct"    # Performance critical
 *         exception_handling = "fail_fast"
 *     }
 *     unicode_processor {
 *         linking = "conditional"  # Based on feature flags
 *         exception_handling = "human_escalation"
 *         @human_note: "Unicode errors often require cultural context"
 *     }
 * }
 * 
 * global_exception_policies {
 *     max_retries = 3
 *     timeout_ms = 10000
 *     escalation_threshold = 2  # Escalate after 2 failures
 *     human_reviewer = "nnamdi_okpala"
 * }
 */

nexus_result_t process_pkg_nlink_file_example(const char* file_path) {
    // Initialize exception resolution engine
    exception_resolution_engine_t exception_engine = {0};
    
    // Example deployment intent processing
    ast_intent_node_t deployment_intent = {
        .layer_type = INTENT_LAYER_DEPLOYMENT,
        .semantic_identifier = "package_deployment_strategy",
        .intent_description = "Support both embedded and server deployment",
        .technical_rationale = "Package must adapt to different deployment environments",
        .link_coordination = {
            .supports_direct_linking = true,   // For embedded performance
            .supports_indirect_linking = true, // For server flexibility
            .preferred_approach = "hybrid"     // Environment-dependent
        },
        .exception_handling = {
            .supports_graceful_degradation = true,
            .retry_count = 3,
            .timeout_ms = 10000
        }
    };

    // Example exception handling for unicode_processor component
    exception_context_t unicode_exception = {
        .type = EXCEPTION_TYPE_SEMANTIC_ERROR,
        .description = "Unicode character encoding error in processor component",
        .technical_details = "Invalid UTF-8 sequence detected during tokenization",
        .requires_human_intervention = true,
        .hitl_escalation = {
            .escalated_to_human = true,
            .assigned_reviewer = "nnamdi_okpala",
            .escalation_reason = "Unicode errors require cultural context validation"
        }
    };
    strncpy(unicode_exception.source_file, file_path, 
            sizeof(unicode_exception.source_file) - 1);
    unicode_exception.line_number = 25;

    // Demonstrate exception resolution strategy
    struct resolution_strategy unicode_strategy = {
        .applicable_type = EXCEPTION_TYPE_SEMANTIC_ERROR,
        .strategy_name = "unicode_cultural_validation",
        .success_rate = 0.95f,
        .requires_human_approval = true,
        .max_retry_count = 1 // Unicode issues rarely benefit from retries
    };

    printf("PACKAGE-LEVEL EXCEPTION HANDLING:\n");
    printf("  Exception: %s\n", unicode_exception.description);
    printf("  Strategy: %s\n", unicode_strategy.strategy_name);
    printf("  Human Reviewer: %s\n", unicode_exception.hitl_escalation.assigned_reviewer);
    printf("  Reason: %s\n", unicode_exception.hitl_escalation.escalation_reason);

    // Demonstrate linking approach coordination
    printf("\nLINKING APPROACH COORDINATION:\n");
    printf("  Deployment Intent: %s\n", deployment_intent.intent_description);
    printf("  Linking Strategy: %s\n", deployment_intent.link_coordination.preferred_approach);
    printf("  Direct Linking: %s\n", deployment_intent.link_coordination.supports_direct_linking ? "Supported" : "Not Supported");
    printf("  Indirect Linking: %s\n", deployment_intent.link_coordination.supports_indirect_linking ? "Supported" : "Not Supported");

    return NEXUS_SUCCESS;
}

/**
 * ============================================================================
 * PRACTICAL EXAMPLE 4: COMPREHENSIVE INTEGRATION DEMONSTRATION
 * ============================================================================
 */

/**
 * Demonstrate end-to-end HITL integration across all configuration file types
 */
nexus_result_t demonstrate_comprehensive_hitl_integration(const char* project_root) {
    printf("=== COMPREHENSIVE HITL INTEGRATION DEMONSTRATION ===\n\n");

    // Initialize comprehensive management engine
    config_management_engine_t* engine;
    nexus_result_t result = nlink_hitl_init_framework(project_root, true, &engine);
    if (result != NEXUS_SUCCESS) {
        printf("Failed to initialize HITL framework\n");
        return result;
    }

    // Process all configuration file types
    char nlinkt_path[512], nlink_path[512], pkg_nlink_path[512];
    snprintf(nlinkt_path, sizeof(nlinkt_path), "%s/src/tokenizer/nlinkt.txt", project_root);
    snprintf(nlink_path, sizeof(nlink_path), "%s/src/tokenizer/tokenizer.nlink", project_root);  
    snprintf(pkg_nlink_path, sizeof(pkg_nlink_path), "%s/pkg.nlink", project_root);

    printf("1. Processing nlinkt.txt files...\n");
    result = process_nlinkt_file_example(nlinkt_path);
    if (result != NEXUS_SUCCESS) {
        printf("   Warning: nlinkt.txt processing encountered issues\n");
    }

    printf("\n2. Processing *.nlink component files...\n");  
    result = process_nlink_component_file_example(nlink_path);
    if (result != NEXUS_SUCCESS) {
        printf("   Warning: Component file processing encountered issues\n");
    }

    printf("\n3. Processing pkg.nlink package files...\n");
    result = process_pkg_nlink_file_example(pkg_nlink_path);
    if (result != NEXUS_SUCCESS) {
        printf("   Warning: Package file processing encountered issues\n");
    }

    // Demonstrate cross-file intent resolution
    printf("\n4. Cross-file intent resolution...\n");
    printf("   Analyzing intent consistency across configuration files...\n");
    printf("   Detecting conflicts between module, component, and package intents...\n");
    
    // Simulate intent conflict detection
    printf("   CONFLICT DETECTED: Module prefers indirect linking, component prefers direct\n");
    printf("   RESOLUTION: Escalating to human coordinator (nnamdi_okpala)\n");
    printf("   STRATEGY: Hybrid approach - direct for performance-critical paths, indirect for flexibility\n");

    // Demonstrate exception handling coordination
    printf("\n5. Exception handling coordination...\n");
    printf("   Monitoring exceptions across all configuration types...\n");
    printf("   Applying package-level exception policies...\n");
    printf("   Escalating cultural/semantic issues to human reviewers...\n");

    // Generate comprehensive validation report
    printf("\n6. Generating validation report...\n");
    char report_path[512];
    snprintf(report_path, sizeof(report_path), "%s/hitl_validation_report.md", project_root);
    
    result = nlink_hitl_generate_validation_report(engine, report_path, true);
    if (result == NEXUS_SUCCESS) {
        printf("   Validation report generated: %s\n", report_path);
        printf("   Report includes human annotations and QA analysis\n");
    }

    // Demonstrate consciousness preservation across transformations
    printf("\n7. Consciousness preservation validation...\n");
    printf("   Verifying temporal anchor continuity across statement transformations...\n");
    printf("   Validating symbolic residue preservation during intent resolution...\n");
    printf("   Ensuring human context preservation across HITL validation cycles...\n");

    // Integration with existing automated nexus-search breakthrough
    printf("\n8. Integration with automated nexus-search breakthrough...\n");
    printf("   HITL validation enhances existing component discovery algorithms\n");
    printf("   Human intent annotations improve chain construction accuracy\n");
    printf("   Exception handling reduces false positive rates in QA validation\n");

    // Cleanup with context preservation
    printf("\n9. Cleanup with session continuity...\n");
    nlink_hitl_cleanup_framework(engine, true); // Preserve human context
    printf("   Human validation context preserved for next session\n");
    printf("   Statement expression database saved\n");
    printf("   Intent resolution state maintained\n");

    printf("\n=== HITL INTEGRATION DEMONSTRATION COMPLETE ===\n");
    return NEXUS_SUCCESS;
}

/**
 * Main demonstration entry point
 */
int main(int argc, char* argv[]) {
    const char* project_root = (argc > 1) ? argv[1] : ".";
    
    printf("NLink HITL Intent Resolution Framework Demonstration\n");
    printf("Project Root: %s\n\n", project_root);
    
    nexus_result_t result = demonstrate_comprehensive_hitl_integration(project_root);
    
    if (result == NEXUS_SUCCESS) {
        printf("\nDemonstration completed successfully.\n");
        printf("All configuration file types processed with HITL validation.\n");
        printf("Intent resolution coordinated across linking approaches.\n");
        printf("Exception handling integrated with human escalation.\n");
        return 0;
    } else {
        printf("\nDemonstration encountered errors (result: %d)\n", result);
        return 1;
    }
}